#!/usr/bin/env ruby
require "optparse"
require "textorize"

options = {}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: #$0 [options] string"
  
  opts.on('-f', '--font=[FONT]', String, 'Font name') do |v|
    options[:font] = v
  end
  
  opts.on('-s', '--size=[SIZE]', Float, 'Font size in point') do |v|
    options[:size] = v
  end
  
  opts.on('-l', '--lineheight=[HEIGHT]', Float, 'Line height in point') do |v|
    options[:lineheight] = v
  end
  
  opts.on('-t', '--ligatures=[TYPE]', String, 'Ligatures usage: all, standard or off') do |v|
    options[:ligatures] = v
  end
  
  opts.on('--list-fonts', 'List available fonts') do |v|
    options[:util] = 'list-fonts'
  end
  
  opts.on('-k', '--kerning=[VALUE]', Float, 'Kerning adjustment') do |v|
    options[:kerning] = v
  end
  
  opts.on('-p', '--padding=[VALUE]', Float, 'Padding in px') do |v|
    options[:padding] = v
  end
  
  opts.on('-o', '--output=[FILENAME]', String, 'Specify filename for saving') do |v|
    options[:output] = v
  end
  
  opts.on('-b', '--obliqueness=[ANGLE]', Float, 'Slant angle') do |v|
    options[:obliqueness] = v
  end
  
  opts.on('-c', '--color=[COLOR]', String, 'Render text in specific color (CSS color value)') do |v|
    options[:color] = v
  end
  
  opts.on('-g', '--background=[COLOR]', String, 'Render background in specific color (CSS color value)') do |v|
    options[:background] = v
  end
  
  opts.on('-m', '--marginbottom=[MARGINBOTTOM]', String, 'Margin bottom of the resulting image') do |v|
    options[:marginbottom] = v
  end
  
  opts.on('-a', '--smoothing=[VALUE]', Integer, 'Font smoothing: 0=no subpixel AA, 1=light, 2=normal, 3=strong') do |v|
    options[:font_smoothing] = v
  end
  
  opts.on_tail('-h', '--help', 'Display this message and exit') do
    puts opts
    exit
  end
  
  if !ARGV.first
    puts opts
    exit
  end
end.parse!

options[:font] ||= 'Arial'
options[:size] ||= 28.0
options[:kerning] ||= 0
options[:lineheight] ||= options[:size]
options[:output] ||= 'output.png'
options[:strings] = ARGV.first
options[:width] ||= 250
options[:obliqueness] ||= 0
options[:util] ||= ''
options[:marginbottom] ||= 0

renderer = Textorize::Runner.new(options[:strings], options[:output], options)